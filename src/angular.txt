1.
.angutar Ignore this folder
.vscode Ignore this folder
for cashing purposes

2.
node_module - installed node modules
Packages will be installed here in this folder
You dont have to go through these folders or files
Unless you are making changes to core libraries/modueles
npm instal or ng add you would see the packages the here

3.
.editorconfig Make your custoe editor changes in this file

4.
.gitignore
We can add folders/fites that we need to ignore commiting
node_modules

5.
angular.json
Configuring your styles, js or for pipeline deployments
settings specific to your project
Earlier app-module/app-module.module.ts where standalone was false by default and module was managed
Now, standalone is true by default
If want to use module make standalone false(if not standalone component then atleast 1 module is necessary)
for entire project to be false change in angular.json.


6.
package.json
e.g:- scripts section, when we type ng serve what it should do
installed dependencies, etc

7.
package-lock.json
same details like package.json with more details of dependencies

8.
tsconfig.app.json
tells you typescript config for your project

9.
tsconfig.spec.json
for testing purposes

10.
src/ - main source code folder
app/ - actual code of your project
  Every component in Angular has 4 files
  .html, .css, .ts
  In app.component.ts selector is the starting point

  app.component.spce.ts
  unit testing, jasmin for writing tests, karma for running tests
  ng test - karma will run jasmin code for test

assets/ - are public
Angular is Single page Application
therefore index.html , styles.css, main.ts are entry point of your project
So, 1. main.ts->AppComponent->app-root

11.
Angular CLI Commands
a. ng version, new project,
b. generate component(ng g c <compo-name>)
         module, services, pipes, directives, routing, interface, model, class
c. ng test
4. ng serve --open (starting development Server, build and launch)
5. ng build (when its production ready) (creates dist folder)
6. ng add (add @angular packages/modules of angular)
7. ng update (update packages, angular versions)
8. ng lint (Linting making sure naking Typescript is proper coding syntax, patterns, etc.
         
12.
Angular Components
1. Angular components are declared using @Component decorator
2. @Component decorator can have multiple inputs/parameters
  a. selector - its the name which can be used/refered in application
  b. standalone - by default all angular applications are stdlone
                  No need import/declare inside a Module, can directly use them in application
  c. imports - you will provide all required modules for this component
  d. templateUrl - HTML for component // template - use when have only limited HTML
  e. styleUrl - CSS of stylesheet for the component // style: [] - inline style
- Logic is written in Component main class e.g:- export class `AppComponent{}`
- Styles specific to component are defined in CSS/SCSS files, 
  allowing encapsulation of visual presentation
- Angular components utilize `data binding` for interactions btw
* TypeScript class(model) and HTML template(view). [Class-> Template -> Class]
- Components communicate with each other using 
  @Imput & @Output decorators for data sharing and `event handling`.
- Component Lifecycle methods
  1. Right from     Creation -> [8 stages] -> Destroy
  2. Angular provides lifecycle hooks like `ngOnInit`, `ngOnDestroy`,
     allowing components to run code at specific lifecycle events.
- View encapsulation in components controls how CSS styles are applied and scoped.
- Components can incorporate directives, enhancing their functionality and behavior.
- Components can inject services as dependencies to share data and functionality across the app.
- Designed for reusability, components can be reused across different parts of the application.
- Angular supports dynamic loading of components, adding flexibility to UI rendering.
- Using `<ng-content>` components can project content into their templates, allowing for more
  dynamic and reusable components.
- Angular's change detection mechanism keeps the Ul in sync with the underlying data model.
- Components are unit-testable, making it easier to maintain and debug applications.
- Components can be nested within other components, enabling complex UI structures.
- Angular components can integrate with third-party UI libraries for extended functionalities.

13.
Angular 17 - Modular Arch.
1. No more NgModule - building block, which encapsulates comp, directives, pipes and services
2. No more default AppModule - Every ang app used to have at least one module, root module
                               which bootstraps application.
3. Everything is standalone - It can be injected and used anywhere
4. Feature Modules -
      Developers can organize code relevant to a specific functionality into feature modules,
      promoting code reusability and separation of concems.
      e.g: Modules like-Authentication, login, payment, profile, order, shopping, etc.
5. Lazy Loading -
      Modules can be lazily loaded, meaning they are loaded on demand, which can significantly
      improve the application's initial loading time.
6. Shared Modules - (using standalone no need to create shared modules)
      Shared modules allow for the declaration of components, directives, and pipes that can
      be used across various modules in an application.
7. Core Module - Core Module often used to hold singleton services, global components, and
      other application-wide resources.
8. Module Imports -
      Modules can import other modules. For example, feature modules often import
      'CommonModuleâ€¢ for common directives like nglf and ngFor.
8. Service Scoping -
      Services provided in Angular modules can be scoped to that module. This allows for
      singleton services or multiple instances across different modules.
9. Declarables -
      Components, directives, and pipes are considered declarables and must be declared in
      exactly one NgModule.
1O. Exporting Module Content -
      Modules can export components, directives, pipes so they can be used in other modules.
11. NgModule Providers - (Now we can do standalone injection)
      Services can be provided in modules, making them available application-wide or in the
      scope of the module.
12. Angular Libraries -
      Angular's modularity extends to external libraries, allowing developers to include and
      use third-party modules in their applications.
13. Hierarchical Dependency Injection -
      Angular's dependency injection system works in tandem with its modularity, allowing for
      hierarchical and efficient management of dependencies.
14. Module Federation (Micro-Frontends) -
      Angular supports module federation, enabling large applications to be broken down into
      smaller, more manageable sub-applications or micro-frontends.
